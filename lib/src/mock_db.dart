import 'package:your_turn/src/models/roommate.dart';
import 'package:your_turn/src/models/todo_item.dart';
import 'package:your_turn/src/models/todo_status.dart';
import 'package:your_turn/src/models/todo_category.dart';
import 'package:your_turn/src/models/money_tx.dart';
import 'package:your_turn/src/models/expense_category.dart';

/// Coinquilini finti
final mockRoommates = <Roommate>[
  Roommate(id: "u1", name: "Ale", photoUrl: 'https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=150&h=150&fit=crop', monthlyBudget: 200, tasksCompleted: 8),
  Roommate(id: "u2", name: "Marco", photoUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=150&h=150&fit=crop', monthlyBudget: 150, tasksCompleted: 5),
  Roommate(id: "u3", name: "Giulia", photoUrl: 'https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=150&h=150&fit=crop', monthlyBudget: 180, tasksCompleted: 6),
  Roommate(id: "u4", name: "Luca", photoUrl: 'https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=150&h=150&fit=crop', monthlyBudget: 120, tasksCompleted: 4),
  Roommate(id: "u5", name: "Sofia", photoUrl: 'https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=150&h=150&fit=crop', monthlyBudget: 160, tasksCompleted: 7),
  Roommate(id: "u6", name: "Andrea", photoUrl: 'https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?w=150&h=150&fit=crop', monthlyBudget: 140, tasksCompleted: 3),
  Roommate(id: "u7", name: "Elena", photoUrl: 'https://images.unsplash.com/photo-1580584126903-c17d41830450?w=150&h=150&fit=crop', monthlyBudget: 175, tasksCompleted: 6),
  Roommate(id: "u8", name: "Matteo", photoUrl: 'https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?w=150&h=150&fit=crop', monthlyBudget: 100, tasksCompleted: 2),
  Roommate(id: "u9", name: "Davide", photoUrl: 'https://images.unsplash.com/photo-1569982175971-d92b01cf8694?w=150&h=150&fit=crop', monthlyBudget: 130, tasksCompleted: 4),
  Roommate(id: "u10", name: "Chiara", photoUrl: 'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=150&h=150&fit=crop', monthlyBudget: 90, tasksCompleted: 3),
];

/// To-do finti con categorie
final mockTodos = <TodoItem>[
  TodoItem(
    id: "t1",
    title: "Fare la spesa 🛒",
    notes: "Latte, pane, uova",
    assigneeIds: ["u1", "u2"],
    cost: 20,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 2)),
    categories: [stockCategories.firstWhere((c) => c.id == 'spesa')],
  ),
  TodoItem(
    id: "t2",
    title: "Pulire la cucina ✨",
    notes: "Attento ai fornelli!",
    assigneeIds: ["u3"],
    cost: 5, // Aggiunto costo per detergenti
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 1)),
    completedAt: DateTime.now().subtract(const Duration(hours: 12)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t3",
    title: "Pagare bolletta luce 💡",
    assigneeIds: ["u1"],
    cost: 90,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 3)),
    completedAt: DateTime.now().subtract(const Duration(days: 2)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t6",
    title: "Organizzare aperitivo 🍻",
    notes: "Con i vicini di casa",
    assigneeIds: ["u1", "u3"],
    cost: 25,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 5)),
    completedAt: DateTime.now().subtract(const Duration(days: 4)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
  TodoItem(
    id: "t7",
    title: "Riparare rubinetto bagno 🔧",
    notes: "Perde da due giorni",
    assigneeIds: ["u2"],
    cost: 30,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 6)),
    completedAt: DateTime.now().subtract(const Duration(days: 5)),
    categories: [stockCategories.firstWhere((c) => c.id == 'manutenzione')],
  ),
  TodoItem(
    id: "t8",
    title: "Comprare ingredienti pizza 🍕",
    notes: "Mozzarella, pomodoro, basilico",
    assigneeIds: ["u2"],
    cost: 15,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 2)),
    completedAt: DateTime.now().subtract(const Duration(days: 1)),
    categories: [stockCategories.firstWhere((c) => c.id == 'spesa')],
  ),
  TodoItem(
    id: "t5",
    title: "Pagare bolletta gas 🔥",
    assigneeIds: ["u1"],
    cost: 60,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 4)),
    completedAt: DateTime.now().subtract(const Duration(days: 3)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t6",
    title: "Organizzare aperitivo 🍻",
    notes: "Con i vicini di casa",
    assigneeIds: ["u1", "u3"],
    cost: 25,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 5)),
    completedAt: DateTime.now().subtract(const Duration(days: 4)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
  TodoItem(
    id: "t7",
    title: "Riparare lavastoviglie 🔧",
    notes: "Filtro intasato",
    assigneeIds: ["u2"],
    cost: 30,
    status: TodoStatus.done,
    createdAt: DateTime.now().subtract(const Duration(days: 6)),
    completedAt: DateTime.now().subtract(const Duration(days: 5)),
    categories: [stockCategories.firstWhere((c) => c.id == 'manutenzione')],
  ),
  TodoItem(
    id: "t8",
    title: "Riparare rubinetto bagno 🔧",
    notes: "Perde da due giorni",
    assigneeIds: ["u2"],
    cost: 12, // Aggiunto costo per guarnizioni/materiali
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 1)),
    categories: [stockCategories.firstWhere((c) => c.id == 'manutenzione')],
  ),
  TodoItem(
    id: "t9",
    title: "Organizzare cena con amici 🎉",
    notes: "Sabato sera, preparare tutto",
    assigneeIds: ["u1", "u3"],
    cost: 35,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 8)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
  TodoItem(
    id: "t10",
    title: "Lavare i piatti 🍽️",
    assigneeIds: ["u2"],
    cost: 3, // Aggiunto costo per detersivo piatti
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 6)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t11",
    title: "Buttare la spazzatura 🗑️",
    assigneeIds: ["u3"],
    cost: 2, // Aggiunto costo per sacchetti spazzatura
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 5)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t8",
    title: "Pagare bolletta gas 🔥",
    assigneeIds: ["u1"],
    cost: 60,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 2)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t9",
    title: "Pulire il bagno 🚽",
    assigneeIds: ["u2"],
    cost: 8, // Aggiunto costo per prodotti per il bagno
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 10)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t10",
    title: "Fare la lavatrice 👕",
    assigneeIds: ["u3"],
    cost: 4, // Aggiunto costo per detersivo lavatrice
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 7)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t11",
    title: "Pagare affitto 🏠",
    assigneeIds: ["u1", "u2", "u3"],
    cost: 900,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 5)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t12",
    title: "Comprare carta igienica 🧻",
    assigneeIds: ["u2"],
    cost: 5,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 3)),
    categories: [stockCategories.firstWhere((c) => c.id == 'spesa')],
  ),
  TodoItem(
    id: "t13",
    title: "Pulire balcone 🌿",
    assigneeIds: ["u3"],
    cost: 6, // Aggiunto costo per prodotti pulizia
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 1)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t14",
    title: "Pagare bolletta acqua 🚰",
    assigneeIds: ["u1"],
    cost: 40,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 4)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t15",
    title: "Organizzare serata film 🎬",
    assigneeIds: ["u2", "u3"],
    cost: 18, // Aggiunto costo per snack e bevande
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 15)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
  TodoItem(
    id: "t16",
    title: "Riparare porta ingresso 🚪",
    assigneeIds: ["u1"],
    cost: 45,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 2)),
    categories: [stockCategories.firstWhere((c) => c.id == 'manutenzione')],
  ),
  TodoItem(
    id: "t17",
    title: "Comprare detersivo 🧴",
    assigneeIds: ["u3"],
    cost: 8,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 2)),
    categories: [stockCategories.firstWhere((c) => c.id == 'spesa')],
  ),
  TodoItem(
    id: "t18",
    title: "Pulire scale condominio 🧹",
    assigneeIds: ["u2"],
    cost: 3,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 9)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t19",
    title: "Pagare internet 📶",
    assigneeIds: ["u1"],
    cost: 35,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 3)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t20",
    title: "Organizzare pranzo domenicale 🍝",
    assigneeIds: ["u2", "u3"],
    cost: 25,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 12)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
  TodoItem(
    id: "t21",
    title: "Riparare lampadina corridoio 💡",
    assigneeIds: ["u3"],
    cost: 12,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 14)),
    categories: [stockCategories.firstWhere((c) => c.id == 'manutenzione')],
  ),
  TodoItem(
    id: "t22",
    title: "Comprare pane 🥖",
    assigneeIds: ["u1"],
    cost: 3,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 1)),
    categories: [stockCategories.firstWhere((c) => c.id == 'spesa')],
  ),
  TodoItem(
    id: "t23",
    title: "Pulire finestre 🪟",
    assigneeIds: ["u2"],
    cost: 7,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 11)),
    categories: [stockCategories.firstWhere((c) => c.id == 'pulizie')],
  ),
  TodoItem(
    id: "t24",
    title: "Pagare Netflix 🎥",
    assigneeIds: ["u3"],
    cost: 15,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(days: 1)),
    categories: [stockCategories.firstWhere((c) => c.id == 'bollette')],
  ),
  TodoItem(
    id: "t25",
    title: "Organizzare torneo di carte 🃏",
    assigneeIds: ["u1", "u2", "u3"],
    cost: 5,
    status: TodoStatus.open,
    createdAt: DateTime.now().subtract(const Duration(hours: 16)),
    categories: [stockCategories.firstWhere((c) => c.id == 'divertimento')],
  ),
];

/// Transazioni finte
final mockTransactions = <MoneyTx>[
  MoneyTx(
    id: "x1",
    roommateId: "u1",
    amount: -45,
    note: "Quota bolletta luce",
    createdAt: DateTime.now().subtract(const Duration(days: 3)),
    category: ExpenseCategory.bolletta,
  ),
  MoneyTx(
    id: "x2",
    roommateId: "u2",
    amount: -10,
    note: "Spesa condivisa",
    createdAt: DateTime.now().subtract(const Duration(days: 1)),
    category: ExpenseCategory.spesa,
  ),
  MoneyTx(
    id: "x3",
    roommateId: "u3",
    amount: 30,
    note: "Rimborso anticipo",
    createdAt: DateTime.now().subtract(const Duration(hours: 20)),
    category: ExpenseCategory.prestito,
  ),
];
